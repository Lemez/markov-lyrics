#audio
	javascript:

		function loadMeSpeakConfig(){
			meSpeak.loadConfig('mespeak/mespeak_config.json');
			meSpeak.loadVoice('mespeak/voices/en/en-us.json');
		}

		$(document).ready( function() {

			// Speak functions
			var options;
			var stream1;
			var mySpeed;
			var myLineBreak = 0;
			var bpm = 60000/126;

			var onePerBar = bpm*4;
			var twoPerBar = bpm*2;
			var threePerBar = bpm*3/2;
			var fourPerBar = bpm;

			var linePatterns = {
				6 : '44|44|2|2',
				7 : '44|44|44|2',
				8 : '44|44|44|44',
				9 : '8888|44|44|2',
				10 : '8888|44|44|44',
				11 : '8888|44|8888|2'
			}

			var beatPatterns = {
							 	normal :[[2],[1,1]],
							 	stress : [[1,0]],
								anticipating : [[0,1]],
								empty : [[0]]
			}
		
			var offsetFeel = 50;
			var mySpeechArray = [];

			//setTimeout(loadSpeakData, 1000);
			//var myText = $('#speak').text();
			//$(':input').on('change', function() {loadSpeakData();});			
			//$('#speak-btn').on('click', function() {meSpeak.play(stream1);});
			// function loadSpeakData() {
			// 	meSpeak.stop();
			// 	stream1 = meSpeak.speak(myText,getOptions());
			// }

			// function getOptions(){
			// 	mySpeed = parseInt($('#boxL').text()); 
			// 	console.log(mySpeed);
			// 	return {speed:mySpeed,
			// 			linebreak:myLineBreak,
			// 			capitals:10,
			// 			wordgap: 0,
			// 			'rawdata': 'base-64'}
			// }

			// function playNormally(){
			//	meSpeak.play(stream1);
			//}

			// breaking it into words
			setTimeout(loadSpeakArrayData, 1000);

			var myTextArray = $('#speak').text().split("\n");

			function capitalizeFirstLetter(string) {
    			return string.charAt(0).toUpperCase() + string.slice(1);
			}

			function loadSpeakArrayData() {
				for (var i=0; i<myTextArray.length; i++) {
					textToAppend = myTextArray[i];

					if (i % 6 == 0 || i % 6 == 2 ) {
						textToAppend = capitalizeFirstLetter(textToAppend);
					}

					newItem = meSpeak.speak(textToAppend,getRiddimOptions());

					mySpeechArray.push(newItem);
				}
			}

			function playWord(){
				word = mySpeechArray[0];
				meSpeak.play(word);
				mySpeechArray.shift();
			}

			function playInRiddim(){
				
				var counter = fourPerBar;
				var beats = 1;

				var myFunction = function(){

								clearInterval(intervalId);
								
							    playWord();

							    indicator = (beats + 5) % 6;
							    pauseAtEndof4thbar = beats % 11;

							    // pattern = Y Y |yyyy|Y Y |yyY |
							    if (indicator == 0 || indicator == 1 || pauseAtEndof4thbar == 0) {
							    	counter = twoPerBar;
							    } else {
							    	counter = fourPerBar;
							    }

							    beats==11 ? beats=1 : beats++;

							    intervalId = setInterval(myFunction, counter);
							}

				var intervalId = setInterval(myFunction, counter);
			}

			function getRiddimOptions(){
				slowSpeed = 180; 
				return {speed:slowSpeed,
						capitals:10,
						'rawdata': 'base-64'}
			}

		
			// Music playing functions
			var myAudio = new Howl({
				  urls: ['drums1.ogg', 'drums1.wav'],
				  loop: true,
				  volume: 0.5 //value btw 0 and 1
				  // onend: function() {console.log('done!');}
				});

			$('#play').on('click', function() {
				//playNormally(); 
				playInRiddim();
				setTimeout(function(){
				myAudio.play()}, offsetFeel);
			});

			$('#stop').on('click', function() {myAudio.stop();});
			$('#quieter').on('click', function() {myAudio.volume(myAudio.volume() - 0.1);});
			$('#louder').on('click', function() {myAudio.volume(myAudio.volume() + 0.1);});
		});



#speak
	= @chorus_lines.join(" ").split(" ").join("\n")

br
ul.list-group
	- pattern = SONGPATTERN
	- pattern.each_char do |p|
		- case p
		- when "V"
			- if @verses.length > 0
				== partial 'partials/verse', :locals => { verse: @verses.first}
				- @verses.shift
		
		- when "C"
			== partial 'partials/chorus', :locals => { chorus: @chorus}
		br

